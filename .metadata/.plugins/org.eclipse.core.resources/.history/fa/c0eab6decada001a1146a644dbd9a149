package Ch34;

import java.sql.*;

public class C01DBConn {
	// DB 연결 정보 저장
	String driver="oracle.jdbc.driver.OracleDriver"; // Oracle드라이브명 저장
	String url="jdbc:oracle:thin:@localhost:1521:XE"; // DB접속 URL 지정 (1521: 오라클 포트)
	String user="system"; // 접속 ID
	String password="12345"; // 접속 PW
	
	String sql; // sql저장용(쿼리 임시저장), SQL문이 임시 저장될 참조 변수
	PreparedStatement pstmt = null; // sql 명령을 담을 공간 (쿼리 저장) -> 전달, SQL문을 DB에 전달하기 위한 참조 변수
	ResultSet rs = null; // sql결과를 저장할 용도(쿼리 결과 저장), SQL의 결과를 검색하기 위한 참조변수
	Connection conn = null; // db연결 객체 참조 값 저장(db연결 객체 저장), DB연결 객체의 주소를 담을 참조변수
	
	C01DBUI gui; // C01DBUI를 컨트롤하기 위한 참조변수
	
	void setting(C01DBUI ui) { // C01DBUI 의 객체 참조값을 받아서 처리하기 위한 함수
		gui = ui;
	}
	
	// C01DBConn 클래스의 생성자, 객체가 되는 순간 DB와 연결
	C01DBConn() {
		try {
			Class.forName(driver); // 드라이버 로딩
			System.out.println("-- Driver Loading Success !! --");
			conn = DriverManager.getConnection(url, user, password); // DB연결 정보 담기
			System.out.println("--- DB Conected ---");
			
		} catch(Exception e) {
			
		}
	}
	// UI에서 txt필드의 값을 받아서 DB의 Table insert
	void INSERT(int no, String name, String dept, String score) {
		try {
			pstmt = conn.prepareStatement("INSERT INTO ScoreTbl VALUES(?,?,?,?)"); // 미리 입력할 쿼리를 씀
			pstmt.setInt(1,no);
			pstmt.setString(2,name);
			pstmt.setString(3,dept);
			pstmt.setString(4,score);
			pstmt.executeUpdate();
		} catch (SQLException e) {
		}
	
	}

	// UI에서 txt필드의 값을 받아서 DB의 Table update
	void UPDATE(int no, String name, String dept, String score) {
		try {
			pstmt = conn.prepareStatement("UPDATE ScoreTbl SET NAME=?, DEPT=?, SCORE=? WHERE NO=?");
			pstmt.setString(1,name);
			pstmt.setString(2,dept);
			pstmt.setString(3,score);
			pstmt.setInt(4,no);
			pstmt.executeUpdate();
		} catch (SQLException e) {
		}
	}

	// UI에서 txt필드의 값을 받아서 DB의 Table delete
	void DELETE(int no) {
		try {
			pstmt = conn.prepareStatement("DELETE ScoreTbl WHERE NO=?"); // 미리 입력할 쿼리를 씀
			pstmt.setInt(1,no);
			pstmt.executeUpdate();
		} catch (SQLException e) {
		}
		
	}
	

	// UI에서 txt필드의 값을 받아서 DB의 Table select
	// 오버로딩
	void SELECT(int no) {
		try {
			pstmt = conn.prepareStatement("SELECT * FROM ScoreTbl WHERE NO=? ORDER BY NAME"); // 미리 입력할 쿼리를 씀
			pstmt.setInt(1,no);
			//pstmt.executeUpdate();
			rs = pstmt.executeQuery(); // 쿼리 결과물을 담음
			
			while(rs.next()) { // next(): 다음 내용이 있으면 true
				String tmpn = rs.getString("NAME"); // NAME열의 내용을 String형으로 가져옴
				String tmpd = rs.getString("DEPT"); // DEPT열의 내용을 String형으로 가져옴
				String tmps = rs.getString("SCORE"); // SCORE열의 내용을 String형으로 가져옴
				C01DBUI.area.append(Integer.toString(no)+"\t"); // append는 String만 가능, Integer.toString()으로 int -> String
				C01DBUI.area.append(tmpn+"\t");
				C01DBUI.area.append(tmpd+"\t");
				C01DBUI.area.append(tmps+"\n");
				//C01DBUI의 area에 출력할 것임
			}
		} catch (SQLException e) {
		}
	}
	
	void SELECT() {
		try {
			pstmt = conn.prepareStatement("SELECT * FROM ScoreTbl ORDER BY NO"); // 미리 입력할 쿼리를 씀
			rs = pstmt.executeQuery(); // 쿼리 결과물을 담음
			
			while(rs.next()) { // next(): 다음 내용이 있으면 true
				int tmpno = rs.getInt("NO"); // NO 열의 내용을 INT형으로 가져옴
				String tmpn = rs.getString("NAME"); // NAME열의 내용을 String형으로 가져옴
				String tmpd = rs.getString("DEPT"); // DEPT열의 내용을 String형으로 가져옴
				String tmps = rs.getString("SCORE"); // SCORE열의 내용을 String형으로 가져옴
				C01DBUI.area.append(tmpno+"\t"); 
				C01DBUI.area.append(tmpn+"\t");
				C01DBUI.area.append(tmpd+"\t");
				C01DBUI.area.append(tmps+"\n");
				//C01DBUI의 area에 출력할 것임
			}
		} catch (SQLException e) {
		}
	}
}
